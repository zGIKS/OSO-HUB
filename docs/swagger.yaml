basePath: /
definitions:
  handlers.CreateUserRequest:
    properties:
      bio:
        type: string
      email:
        type: string
      password:
        type: string
      profile_picture_url:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  handlers.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  handlers.ReportCategory:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  models.Image:
    properties:
      day_bucket:
        type: string
      image_id:
        type: string
      image_url:
        type: string
      title:
        type: string
      uploaded_at:
        type: string
      user_id:
        type: string
      user_profile_picture_url:
        type: string
      username:
        type: string
    type: object
  models.ReportRequest:
    properties:
      category:
        description: 'ID de la categoría (ej: "harassment", "hate", etc.)'
        type: string
      reason:
        description: Descripción adicional opcional
        type: string
    required:
    - category
    type: object
  models.User:
    properties:
      bio:
        type: string
      created_at:
        type: string
      email:
        type: string
      password_hash:
        type: string
      profile_picture_url:
        type: string
      role:
        type: string
      user_id:
        type: string
      username:
        type: string
    type: object
host: oso-hub.onrender.com
info:
  contact: {}
  description: API for OSOHUB using Cassandra
  title: OSOHUB API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      summary: Login by email and password
      tags:
      - Auth & Users
  /feed:
    get:
      parameters:
      - description: Day bucket (YYYY-MM-DD)
        in: query
        name: day_bucket
        type: string
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Image'
            type: array
      summary: Get global image feed (latest images)
      tags:
      - Images
  /images:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: Image file (JPG, PNG, GIF, WebP, max 10MB)
        in: formData
        name: image
        required: true
        type: file
      - description: Image title (max 100 characters)
        in: formData
        name: title
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Image'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Upload a new image file to Cloudinary
      tags:
      - Images
  /images/{image_id}:
    delete:
      parameters:
      - description: Image ID
        in: path
        name: image_id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete an image by ID (solo el dueño puede borrar)
      tags:
      - Images
  /images/{image_id}/like:
    delete:
      parameters:
      - description: Image ID
        in: path
        name: image_id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Remove like from an image
      tags:
      - Images
    post:
      parameters:
      - description: Image ID
        in: path
        name: image_id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Like an image (one like per user)
      tags:
      - Images
  /images/{image_id}/like/status:
    get:
      parameters:
      - description: Image ID
        in: path
        name: image_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Returns {''liked'': true/false}'
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Check if current user has liked an image
      tags:
      - Images
  /images/{image_id}/likes/count:
    get:
      parameters:
      - description: Image ID
        in: path
        name: image_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Get like count for an image
      tags:
      - Images
  /images/{image_id}/report:
    post:
      consumes:
      - application/json
      description: Report an image for inappropriate content or other reasons
      parameters:
      - description: Image ID
        in: path
        name: image_id
        required: true
        type: string
      - description: Report reason
        in: body
        name: report
        required: true
        schema:
          $ref: '#/definitions/models.ReportRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Report an image
      tags:
      - Images
  /images/{image_id}/reports/count:
    get:
      description: Get the number of reports for a specific image
      parameters:
      - description: Image ID
        in: path
        name: image_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: integer
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get report count for an image
      tags:
      - Images
  /images/byid/{image_id}:
    get:
      parameters:
      - description: Image ID
        in: path
        name: image_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Image'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Get image by ID (direct, for Swagger compatibility)
      tags:
      - Images
  /profile/{username}:
    get:
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Returns user profile and their images
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Get public profile by username (no authentication required)
      tags:
      - Auth & Users
  /reports/by-category:
    get:
      description: Get reports grouped by category for moderation purposes
      parameters:
      - description: Filter by specific category
        in: query
        name: category
        type: string
      - description: 'Limit number of results (default: 50)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get reports grouped by category (Admin only)
      tags:
      - Images
  /reports/categories:
    get:
      description: Get list of available categories for reporting content
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              items:
                $ref: '#/definitions/handlers.ReportCategory'
              type: array
            type: object
      summary: Get available report categories
      tags:
      - Images
  /users:
    post:
      consumes:
      - application/json
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties: true
            type: object
      summary: Create a new user
      tags:
      - Auth & Users
  /users/{user_id}:
    get:
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Get user by ID
      tags:
      - Auth & Users
  /users/{user_id}/ban:
    patch:
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Ban (true) or unban (false)
        in: query
        name: banned
        required: true
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Ban or unban a user
      tags:
      - Auth & Users
  /users/{user_id}/images:
    get:
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Image'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Get all images for a user (profile)
      tags:
      - Images
  /users/me:
    get:
      description: Get the profile information of the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get current authenticated user info
      tags:
      - Auth & Users
    patch:
      consumes:
      - multipart/form-data
      description: Allows the user to update their username, bio, profile picture,
        and/or password
      parameters:
      - description: New username
        in: formData
        name: username
        type: string
      - description: New bio
        in: formData
        name: bio
        type: string
      - description: New profile picture (JPG, PNG, WebP, max 10MB)
        in: formData
        name: profile_picture
        type: file
      - description: New password
        in: formData
        name: password
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update the authenticated user's profile
      tags:
      - Auth & Users
  /users/me/share-link:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: Returns share_url
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get shareable link for current user's profile
      tags:
      - Auth & Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: Endpoints for authentication and user management
  name: Auth & Users
- description: Endpoints for image management and feed
  name: Images
